#!/usr/bin/env xonsh

$RAISE_SUBPROC_ERROR = True

import getpass
import json

from datetime import datetime, timedelta

machine_name = input("Hostname of new machine: ").strip()
ssh_passphrase = getpass.getpass("SSH key password for new machine: ").strip()

workdir = $(mktemp -d).strip()
ssh-keygen -N @(ssh_passphrase) -t ed25519 -f f"{workdir}/id_ed25519"

echo "LOG IN TO GITHUB:"
gh auth login -h github.com
gh auth refresh -h github.com -s admin:public_key
gh ssh-key add f"{workdir}/id_ed25519.pub"

$AWS_DEFAULT_OUTPUT = "json"
aws iam create-user --user-name @(machine_name) > /dev/null
aws iam attach-user-policy --user-name @(machine_name) --policy-arn "arn:aws:iam::aws:policy/job-function/SystemAdministrator" > /dev/null
$iam_user_access_key = json.loads($(aws iam create-access-key --user-name @(machine_name)))

echo "LOG IN TO BITWARDEN:"
try:
  bw login
except:
  echo "already logged in"

echo "USE BITWARDEN SEND TO SHARE CREDENTIALS"

# For some reason, if these keys are more descriptive we get an error from bitwarden.
# Maybe we overflow the maximum length of a text Send?
secrets_object = {
  "i": open(f"{workdir}/id_ed25519").read(),
  "ip": open(f"{workdir}/id_ed25519.pub").read(),
  "ak": $iam_user_access_key["AccessKey"]["AccessKeyId"],
  "sk": $iam_user_access_key["AccessKey"]["SecretAccessKey"],
}

send_link = json.loads($(bw send -n f"{machine_name} secrets" -d 1 @(json.dumps(secrets_object))))

echo "Okay, now run the following on the new host:"
echo
echo f"curl -L https://raw.githubusercontent.com/benwr/soanm/main/soanm_enroll.sh | sh -s {send_link['accessUrl']}"
